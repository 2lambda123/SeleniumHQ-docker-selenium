# .circleci/config.yml
version: 2.1

executors:
  ubuntu2004arm64:
    machine:
      image: ubuntu-2004:current
    resource_class: arm-medium
  ubuntu2004amd64:
    machine:
      image: ubuntu-2004:current
    resource_class: medium

jobs:
  build-multi-arch:
    parameters:
      platforms: 
        type: string
      machine-type:
        type: executor
    executor: << parameters.machine-type >>
    environment:
      NAMESPACE: seleniarm
      BUILD_DATE: today
      PLATFORMS: << parameters.platforms >>
    steps:
      - run: uname -a
      - run: docker info
      - run: |
          echo "CIRCLE_WORKFLOW_ID = " $CIRCLE_WORKFLOW_ID
          git clone https://github.com/seleniumhq-community/docker-seleniarm.git
          cd docker-seleniarm
          git checkout $CIRCLE_BRANCH
          echo $PWD
      - run: |
          echo "Install QEMU binaries"
          curl -L  https://github.com/xpack-dev-tools/qemu-arm-xpack/releases/download/v6.2.0-2/xpack-qemu-arm-6.2.0-2-linux-$(uname -m | sed 's/x86_64/x64/' | sed 's/aarch64/arm64/').tar.gz -o xpack-qemu-arm-6.2.0-2-linux-$(uname -m | sed 's/x86_64/x64/' | sed 's/aarch64/arm64/').tar.gz \
            && tar xvfz xpack-qemu-arm-6.2.0-2-linux-$(uname -m | sed 's/x86_64/x64/' | sed 's/aarch64/arm64/').tar.gz \
            && echo "export PATH=$PWD/xpack-qemu-arm-6.2.0-2/bin:$PATH" > ~/.bashrc \
            && source ~/.bashrc \
            && qemu-system-aarch64 --version
      - run: |
          echo "Build Docker images"
          cd docker-seleniarm
          echo $PWD
          export BRANCH=$CIRCLE_BRANCH
          #export PLATFORMS=
          NAME=${NAMESPACE} VERSION=${BRANCH} BUILD_DATE=${BUILD_DATE} PLATFORMS=${PLATFORMS} make build_multi
      - run: |
          echo "Save Docker Images in Cache"
          export VERSION=$CIRCLE_BRANCH
          echo $NAMESPACE/base:$VERSION-$BUILD_DATE 
          echo $NAMESPACE/node-base:$VERSION-$BUILD_DATE 
          echo $NAMESPACE/hub:$VERSION-$BUILD_DATE 
          echo $NAMESPACE/node-chromium:$VERSION-$BUILD_DATE 
          echo $NAMESPACE/standalone-chromium:$VERSION-$BUILD_DATE 
          echo $NAMESPACE/node-firefox:$VERSION-$BUILD_DATE 
          echo $NAMESPACE/standalone-firefox:$VERSION-$BUILD_DATE 
          docker save -o multi-arch-images.tar \
            $NAMESPACE/base:$VERSION-$BUILD_DATE \
            $NAMESPACE/node-base:$VERSION-$BUILD_DATE \
            $NAMESPACE/hub:$VERSION-$BUILD_DATE \
            $NAMESPACE/node-chromium:$VERSION-$BUILD_DATE \
            $NAMESPACE/standalone-chromium:$VERSION-$BUILD_DATE \
            $NAMESPACE/node-firefox:$VERSION-$BUILD_DATE \
            $NAMESPACE/standalone-firefox:$VERSION-$BUILD_DATE
      - save_cache:
          key: multi-arch-images-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-<< parameters.platforms >>
          paths: 
            - multi-arch-images.tar

  test-multi-arch:
    parameters:
      platforms: 
        type: string
      machine-type:
        type: executor
    executor: << parameters.machine-type >>
    environment:
      NAMESPACE: seleniarm
      BUILD_DATE: today
    steps:
      - restore_cache:
          keys: 
            - multi-arch-images-{{ .Branch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}-<< parameters.platforms >>
      - run: uname -a
      - run: docker info
      - run: |
          echo "CIRCLE_WORKFLOW_ID = " $CIRCLE_WORKFLOW_ID
          echo "Load built images into Docker"
          docker load -i multi-arch-images.tar
      - run: |
          git clone https://github.com/seleniumhq-community/docker-seleniarm.git
          cd docker-seleniarm
          git checkout $CIRCLE_BRANCH
          echo $PWD
      - run: |
          echo "Use Python3 and pip3 instead of Python2.7"
          cd docker-seleniarm
          sed -i 's/pip /pip3 /g' tests/bootstrap.sh
          sed -i 's/python /python3 /g' tests/bootstrap.sh
          sed -i 's/-m pip3 /-m pip /g' tests/bootstrap.sh
      - run: 
          no_output_timeout: 2m
          command: |
            echo "Test Docker images"
            cd docker-seleniarm
            echo $PWD
            export USE_RANDOM_USER=false
            #export BUILD_DATE=$(date '+%Y%m%d')
            export BRANCH=$CIRCLE_BRANCH
            #export ARCH=`dpkg --print-architecture`
            USE_RANDOM_USER_ID=${USE_RANDOM_USER} NAMESPACE=${NAMESPACE} VERSION=${BRANCH} BUILD_DATE=${BUILD_DATE} SKIP_BUILD=true make test_multi_arch

workflows:
  build:
    jobs:
      - build-multi-arch:
          name: build-multi-arch-arm64
          platforms: linux/arm64
          machine-type: ubuntu2004arm64
      - build-multi-arch:
          name: build-multi-arch-amd64
          platforms: linux/amd64
          machine-type: ubuntu2004amd64
      - test-multi-arch:
          name: test-multi-arch-arm64
          requires: [build-multi-arch-arm64]
          platforms: linux/arm64
          machine-type: ubuntu2004arm64
      - test-multi-arch:
          name: test-multi-arch-amd64
          requires: [build-multi-arch-amd64]
          platforms: linux/amd64
          machine-type: ubuntu2004amd64

              